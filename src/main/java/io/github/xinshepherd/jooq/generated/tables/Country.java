/*
 * This file is generated by jOOQ.
 */
package io.github.xinshepherd.jooq.generated.tables;


import io.github.xinshepherd.jooq.generated.Indexes;
import io.github.xinshepherd.jooq.generated.Keys;
import io.github.xinshepherd.jooq.generated.World;
import io.github.xinshepherd.jooq.generated.enums.CountryContinent;
import io.github.xinshepherd.jooq.generated.tables.records.CountryRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Country extends TableImpl<CountryRecord> {

    private static final long serialVersionUID = -342566038;

    /**
     * The reference instance of <code>world.country</code>
     */
    public static final Country COUNTRY = new Country();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CountryRecord> getRecordType() {
        return CountryRecord.class;
    }

    /**
     * The column <code>world.country.Code</code>.
     */
    public final TableField<CountryRecord, String> CODE = createField(DSL.name("Code"), org.jooq.impl.SQLDataType.CHAR(3).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>world.country.Name</code>.
     */
    public final TableField<CountryRecord, String> NAME = createField(DSL.name("Name"), org.jooq.impl.SQLDataType.CHAR(52).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>world.country.Continent</code>.
     */
    public final TableField<CountryRecord, CountryContinent> CONTINENT = createField(DSL.name("Continent"), org.jooq.impl.SQLDataType.VARCHAR(13).nullable(false).defaultValue(org.jooq.impl.DSL.inline("Asia", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(io.github.xinshepherd.jooq.generated.enums.CountryContinent.class), this, "");

    /**
     * The column <code>world.country.Region</code>.
     */
    public final TableField<CountryRecord, String> REGION = createField(DSL.name("Region"), org.jooq.impl.SQLDataType.CHAR(26).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>world.country.SurfaceArea</code>.
     */
    public final TableField<CountryRecord, Double> SURFACEAREA = createField(DSL.name("SurfaceArea"), org.jooq.impl.SQLDataType.FLOAT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.FLOAT)), this, "");

    /**
     * The column <code>world.country.IndepYear</code>.
     */
    public final TableField<CountryRecord, Short> INDEPYEAR = createField(DSL.name("IndepYear"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>world.country.Population</code>.
     */
    public final TableField<CountryRecord, Integer> POPULATION = createField(DSL.name("Population"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>world.country.LifeExpectancy</code>.
     */
    public final TableField<CountryRecord, Double> LIFEEXPECTANCY = createField(DSL.name("LifeExpectancy"), org.jooq.impl.SQLDataType.FLOAT, this, "");

    /**
     * The column <code>world.country.GNP</code>.
     */
    public final TableField<CountryRecord, Double> GNP = createField(DSL.name("GNP"), org.jooq.impl.SQLDataType.FLOAT, this, "");

    /**
     * The column <code>world.country.GNPOld</code>.
     */
    public final TableField<CountryRecord, Double> GNPOLD = createField(DSL.name("GNPOld"), org.jooq.impl.SQLDataType.FLOAT, this, "");

    /**
     * The column <code>world.country.LocalName</code>.
     */
    public final TableField<CountryRecord, String> LOCALNAME = createField(DSL.name("LocalName"), org.jooq.impl.SQLDataType.CHAR(45).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>world.country.GovernmentForm</code>.
     */
    public final TableField<CountryRecord, String> GOVERNMENTFORM = createField(DSL.name("GovernmentForm"), org.jooq.impl.SQLDataType.CHAR(45).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>world.country.HeadOfState</code>.
     */
    public final TableField<CountryRecord, String> HEADOFSTATE = createField(DSL.name("HeadOfState"), org.jooq.impl.SQLDataType.CHAR(60), this, "");

    /**
     * The column <code>world.country.Capital</code>.
     */
    public final TableField<CountryRecord, Integer> CAPITAL = createField(DSL.name("Capital"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>world.country.Code2</code>.
     */
    public final TableField<CountryRecord, String> CODE2 = createField(DSL.name("Code2"), org.jooq.impl.SQLDataType.CHAR(2).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * Create a <code>world.country</code> table reference
     */
    public Country() {
        this(DSL.name("country"), null);
    }

    /**
     * Create an aliased <code>world.country</code> table reference
     */
    public Country(String alias) {
        this(DSL.name(alias), COUNTRY);
    }

    /**
     * Create an aliased <code>world.country</code> table reference
     */
    public Country(Name alias) {
        this(alias, COUNTRY);
    }

    private Country(Name alias, Table<CountryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Country(Name alias, Table<CountryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Country(Table<O> child, ForeignKey<O, CountryRecord> key) {
        super(child, key, COUNTRY);
    }

    @Override
    public Schema getSchema() {
        return World.WORLD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COUNTRY_PRIMARY);
    }

    @Override
    public UniqueKey<CountryRecord> getPrimaryKey() {
        return Keys.KEY_COUNTRY_PRIMARY;
    }

    @Override
    public List<UniqueKey<CountryRecord>> getKeys() {
        return Arrays.<UniqueKey<CountryRecord>>asList(Keys.KEY_COUNTRY_PRIMARY);
    }

    @Override
    public Country as(String alias) {
        return new Country(DSL.name(alias), this);
    }

    @Override
    public Country as(Name alias) {
        return new Country(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Country rename(String name) {
        return new Country(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Country rename(Name name) {
        return new Country(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<String, String, CountryContinent, String, Double, Short, Integer, Double, Double, Double, String, String, String, Integer, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
